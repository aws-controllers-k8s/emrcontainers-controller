// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// A configuration for CloudWatch monitoring. You can configure your jobs to
// send log information to CloudWatch Logs.
type CloudWatchMonitoringConfiguration struct {
	LogStreamNamePrefix *string `json:"logStreamNamePrefix,omitempty"`
}

// A configuration specification to be used when provisioning virtual clusters,
// which can include configurations for applications and software bundled with
// Amazon EMR on EKS. A configuration consists of a classification, properties,
// and optional nested configurations. A classification refers to an application-specific
// configuration file. Properties are the settings you want to change in that
// file.
type Configuration struct {
	Classification *string `json:"classification,omitempty"`
}

// The information about the container used for a job run or a managed endpoint.
type ContainerInfo struct {
	// The information about the Amazon EKS cluster.
	EKSInfo *EKSInfo `json:"eksInfo,omitempty"`
}

// The information about the container provider.
type ContainerProvider struct {
	ID *string `json:"id,omitempty"`
	// The information about the container used for a job run or a managed endpoint.
	Info *ContainerInfo `json:"info,omitempty"`
	Type *string        `json:"type_,omitempty"`
}

// The information about the Amazon EKS cluster.
type EKSInfo struct {
	Namespace *string `json:"namespace,omitempty"`
}

// This entity represents the endpoint that is managed by Amazon EMR on EKS.
type Endpoint struct {
	CreatedAt        *metav1.Time       `json:"createdAt,omitempty"`
	ExecutionRoleARN *string            `json:"executionRoleARN,omitempty"`
	FailureReason    *string            `json:"failureReason,omitempty"`
	ID               *string            `json:"id,omitempty"`
	Name             *string            `json:"name,omitempty"`
	ReleaseLabel     *string            `json:"releaseLabel,omitempty"`
	SecurityGroup    *string            `json:"securityGroup,omitempty"`
	StateDetails     *string            `json:"stateDetails,omitempty"`
	Tags             map[string]*string `json:"tags,omitempty"`
	VirtualClusterID *string            `json:"virtualClusterID,omitempty"`
}

// Specify the driver that the job runs on. Exactly one of the two available
// job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
type JobDriver struct {
	// The information about job driver for Spark submit.
	SparkSubmitJobDriver *SparkSubmitJobDriver `json:"sparkSubmitJobDriver,omitempty"`
}

// This entity describes a job run. A job run is a unit of work, such as a Spark
// jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on
// EKS.
type JobRun_SDK struct {
	ARN              *string      `json:"arn,omitempty"`
	ClientToken      *string      `json:"clientToken,omitempty"`
	CreatedAt        *metav1.Time `json:"createdAt,omitempty"`
	CreatedBy        *string      `json:"createdBy,omitempty"`
	ExecutionRoleARN *string      `json:"executionRoleARN,omitempty"`
	FailureReason    *string      `json:"failureReason,omitempty"`
	FinishedAt       *metav1.Time `json:"finishedAt,omitempty"`
	ID               *string      `json:"id,omitempty"`
	// Specify the driver that the job runs on. Exactly one of the two available
	// job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
	JobDriver    *JobDriver `json:"jobDriver,omitempty"`
	Name         *string    `json:"name,omitempty"`
	ReleaseLabel *string    `json:"releaseLabel,omitempty"`
	// The configuration of the retry policy that the job runs on.
	RetryPolicyConfiguration *RetryPolicyConfiguration `json:"retryPolicyConfiguration,omitempty"`
	// The current status of the retry policy executed on the job.
	RetryPolicyExecution *RetryPolicyExecution `json:"retryPolicyExecution,omitempty"`
	State                *string               `json:"state,omitempty"`
	StateDetails         *string               `json:"stateDetails,omitempty"`
	Tags                 map[string]*string    `json:"tags,omitempty"`
	VirtualClusterID     *string               `json:"virtualClusterID,omitempty"`
}

// The values of StartJobRun API requests used in job runs started using the
// job template.
type JobTemplateData struct {
	ConfigurationOverrides *string `json:"configurationOverrides,omitempty"`
	ExecutionRoleARN       *string `json:"executionRoleARN,omitempty"`
	// Specify the driver that the job runs on. Exactly one of the two available
	// job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
	JobDriver              *JobDriver                                 `json:"jobDriver,omitempty"`
	JobTags                map[string]*string                         `json:"jobTags,omitempty"`
	ParameterConfiguration map[string]*TemplateParameterConfiguration `json:"parameterConfiguration,omitempty"`
	ReleaseLabel           *string                                    `json:"releaseLabel,omitempty"`
}

// This entity describes a job template. Job template stores values of StartJobRun
// API request in a template and can be used to start a job run. Job template
// allows two use cases: avoid repeating recurring StartJobRun API request values,
// enforcing certain values in StartJobRun API request.
type JobTemplate_SDK struct {
	ARN             *string      `json:"arn,omitempty"`
	CreatedAt       *metav1.Time `json:"createdAt,omitempty"`
	CreatedBy       *string      `json:"createdBy,omitempty"`
	DECRyptionError *string      `json:"dECRyptionError,omitempty"`
	ID              *string      `json:"id,omitempty"`
	// The values of StartJobRun API requests used in job runs started using the
	// job template.
	JobTemplateData *JobTemplateData   `json:"jobTemplateData,omitempty"`
	KMSKeyARN       *string            `json:"kmsKeyARN,omitempty"`
	Name            *string            `json:"name,omitempty"`
	Tags            map[string]*string `json:"tags,omitempty"`
}

// Lake Formation related configuration inputs for the security configuration.
type LakeFormationConfiguration struct {
	QueryEngineRoleARN *string `json:"queryEngineRoleARN,omitempty"`
}

// A configuration for CloudWatch monitoring. You can configure your jobs to
// send log information to CloudWatch Logs. This data type allows job template
// parameters to be specified within.
type ParametricCloudWatchMonitoringConfiguration struct {
	LogStreamNamePrefix *string `json:"logStreamNamePrefix,omitempty"`
}

// The configuration of the retry policy that the job runs on.
type RetryPolicyConfiguration struct {
	MaxAttempts *int64 `json:"maxAttempts,omitempty"`
}

// The current status of the retry policy executed on the job.
type RetryPolicyExecution struct {
	CurrentAttemptCount *int64 `json:"currentAttemptCount,omitempty"`
}

// Namespace inputs for the system job.
type SecureNamespaceInfo struct {
	ClusterID *string `json:"clusterID,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// Inputs related to the security configuration. Security configurations in
// Amazon EMR on EKS are templates for different security setups. You can use
// security configurations to configure the Lake Formation integration setup.
// You can also create a security configuration to re-use a security setup each
// time you create a virtual cluster.
type SecurityConfiguration struct {
	CreatedAt *metav1.Time       `json:"createdAt,omitempty"`
	CreatedBy *string            `json:"createdBy,omitempty"`
	ID        *string            `json:"id,omitempty"`
	Name      *string            `json:"name,omitempty"`
	Tags      map[string]*string `json:"tags,omitempty"`
}

// The job driver for job type.
type SparkSQLJobDriver struct {
	EntryPoint *string `json:"entryPoint,omitempty"`
}

// The information about job driver for Spark submit.
type SparkSubmitJobDriver struct {
	EntryPoint            *string   `json:"entryPoint,omitempty"`
	EntryPointArguments   []*string `json:"entryPointArguments,omitempty"`
	SparkSubmitParameters *string   `json:"sparkSubmitParameters,omitempty"`
}

// The configuration of a job template parameter.
type TemplateParameterConfiguration struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Type         *string `json:"type_,omitempty"`
}

// This entity describes a virtual cluster. A virtual cluster is a Kubernetes
// namespace that Amazon EMR is registered with. Amazon EMR uses virtual clusters
// to run jobs and host endpoints. Multiple virtual clusters can be backed by
// the same physical cluster. However, each virtual cluster maps to one namespace
// on an Amazon EKS cluster. Virtual clusters do not create any active resources
// that contribute to your bill or that require lifecycle management outside
// the service.
type VirtualCluster_SDK struct {
	ARN *string `json:"arn,omitempty"`
	// The information about the container provider.
	ContainerProvider       *ContainerProvider `json:"containerProvider,omitempty"`
	CreatedAt               *metav1.Time       `json:"createdAt,omitempty"`
	ID                      *string            `json:"id,omitempty"`
	Name                    *string            `json:"name,omitempty"`
	SecurityConfigurationID *string            `json:"securityConfigurationID,omitempty"`
	State                   *string            `json:"state,omitempty"`
	Tags                    map[string]*string `json:"tags,omitempty"`
}
